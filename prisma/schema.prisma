generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model allowlist {
  class_id         String?
  contract_address String?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  id               String    @id(map: "allowlist_new_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  is_owned         Boolean?  @default(false)
  token_id         String?
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  user_address     String?
  xp_id            Int?
  xp               xp?       @relation(fields: [xp_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "allowlist_new_xp_id_fkey")
}

model contract {
  contract_address String             @id(map: "contracts_pkey")
  owner            String             @db.VarChar(50)
  name             String             @db.VarChar(250)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  contract_classes contract_classes[]
}

model contract_classes {
  contract_id  String
  class_id     String
  metadata_url String   @db.VarChar(250)
  name         String   @db.VarChar(250)
  desc         String   @db.VarChar(1000)
  opensea_url  String   @db.VarChar(250)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  contract     contract @relation(fields: [contract_id], references: [contract_address], onDelete: NoAction, onUpdate: NoAction)

  @@id([contract_id, class_id])
}

model contract_users {
  contract_id String
  user_id     String
  role        String   @db.VarChar(50)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@id([contract_id, user_id])
}

model org {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  name         String?
  country_id   BigInt?
  type         Int?      @db.SmallInt
  auth_wallets Json?
  access_key   Json[]
  logo_url     String?
  slug         String?
  uuid         String?   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  series       series[]
}

model org_scheme {
  id                BigInt    @id @default(autoincrement())
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  status            Int?      @db.SmallInt
  scheme            BigInt?
  contract_flat     Json?
  contract_verified Boolean?
  contract_abi      Json?
  contract_access   Json?
}

model role {
  id         Int       @id(map: "roles_pkey") @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?
  policy_org Json?     @db.Json
  policy_ops Json?     @db.Json
}

model scheme {
  id            Int       @id(map: "schemes_pkey") @default(autoincrement())
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  name          String?
  contracts     Json[]
  access_policy Json?
}

model series {
  id                Int       @id @default(autoincrement())
  org_id            Int?
  category          Int?      @db.SmallInt
  title             String?
  description       String?
  image_url         String?
  banner_url        String?
  attributes        Json?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @db.Timestamptz(6)
  contract_template Json?
  contract_version  String?
  tokens            Json?
  slug              String?
  uuid              String?   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  contract          String?
  requirements      String?
  abi               Json[]    @db.Json
  contract_address  String?
  owner             String?
  delegate_address  String?
  template_address  String?
  delegate_abi      Json[]    @db.Json
  contract_abi      Json[]    @db.Json
  org               org?      @relation(fields: [org_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  xp                xp[]
}

model user {
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  status        Int?      @db.SmallInt
  wallets       String[]
  attributes    Json?
  tokens        Json?
  xp            Json?
  profile       Json?
  role_id       BigInt[]
  org_id        BigInt[]
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  referred_by   String?
  is_registered Boolean?
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         Json?     @db.Json
  phone         Json?     @db.Json
}

model xp {
  id            Int             @id @default(autoincrement())
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  status        Int?            @db.SmallInt
  contract      String?
  xp_code       String?
  title         String?
  description   String?
  series_id     Int?
  image_url     String?
  slug          String?
  uuid          String?         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  template      String?
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  class_id      String?
  requirements  String?
  allowlist     allowlist[]
  allowlist_old allowlist_old[]
  series        series?         @relation(fields: [series_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  xp_type       xp_type?        @relation(fields: [xp_code], references: [xp_code], onDelete: NoAction, onUpdate: NoAction)
}

model xp_type {
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  name        String?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  description String?
  xp_code     String    @id
  xp          xp[]
}

model transaction {
  txn_hash         String   @id
  class_id         String
  from             String
  to               String
  status           Int      @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())
  contract_address String?
  token_id         String?
}

model allowlist_old {
  id               String    @id(map: "allowlist_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  xp_id            Int?
  user_address     String?
  contract_address String?
  is_owned         Boolean?  @default(false)
  class_id2        Int?      @db.SmallInt
  token_id         String?
  class_id         String?
  xp               xp?       @relation(fields: [xp_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "allowlist_xp_id_fkey")
}
